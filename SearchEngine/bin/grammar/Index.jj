options{
	JDK_VERSION="1.5";
	STATIC = false;	
}

PARSER_BEGIN(Index)

package grammar;
import index.*;
import search.*;
import java.io.IOException;


public class Index {

public static IndexBuilder builder;
public static Search recherche;

  public static void build(String file, Search search) throws IOException{ 
    Index analyseur;

    java.io.InputStream input;
    builder = new IndexBuilder();
    recherche = search;
	
	if(file != ""){
    System.out.print(file + ": ");
      try {
        input = new java.io.FileInputStream(file+".txt");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
	}
	
    try {
      analyseur = new Index(input);
      analyseur.analyse();
      System.out.println("Analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Index)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static long entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "-"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
	<INPUT : "input">
	| <OUTPUT : "output">
 	| <TXT : ".txt">
}

/*** Unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Long.parseLong(image.toString());
        }
| < #lettre: ["0"-"9","A"-"Z","a"-"z","é", "è", "ê", "ë", "à", "á", "â", "ç", "æ", "ü", "û", "ù", "î", "ï", "ò", "ô", "ì", "œ", "ñ", "°", "_", "-"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}

| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
	lineOutputs() {recherche.toDo();}
}

void lineOutputs() :{}
{
	lineOutput() lineOutputs() 
	| <EOF>
}

void lineOutput() : {}
{
   <ident> {builder.addWord(IndexTokenManager.identLu);} ","
   <ident> <TXT> {builder.addFile(IndexTokenManager.identLu);} 
   <entier> {builder.addOffset(IndexTokenManager.identLu);}
   ("," <entier> {builder.addOffset(IndexTokenManager.identLu);})*
   {builder.buildSet();}
   
   |
   
   <entier> {builder.addWord(Long.toString(IndexTokenManager.entierLu));} ","
   <ident> <TXT> {builder.addFile(IndexTokenManager.identLu);} 
   <entier> {builder.addOffset(IndexTokenManager.identLu);}
   ("," <entier> {builder.addOffset(IndexTokenManager.identLu);})*
   {builder.buildSet();}
}